plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = 'com.oblac'
version = '1.3.0'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

rootProject.description = 'A lightweight message queue for Java that requires no dedicated queue server.'

dependencies {
    implementation 'io.lettuce:lettuce-core:6.2.2.RELEASE'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "standardOut", "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

//
// MAVEN
//

ext.admin = hasProperty('sonatypeUsername')

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            customizePom(pom, rootProject)
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            if (admin) {
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}

def customizePom(pom, gradleProject) {
    pom.withXml {
        def root = asNode()

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            name 'JRSMQ'
            description gradleProject.description
            url 'https://githu.com/igr/jrsmq'
            organization {
                name 'Oblac'
                url 'https://oblac.com'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/igr/jrsmq/issues'
            }
            licenses {
                license {
                    name 'The New BSD License'
                    url 'https://github.com/igr/jrsmq/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/igr/jrsmq'
                connection 'scm:git:git://github.com/igr/jrsmq.git'
                developerConnection 'scm:git:ssh://git@github.com/igr/jrsmq.git'
            }
            developers {
                developer {
                    id 'igor'
                    name 'Igor SpasiÄ‡'
                    email 'igor@jodd.org'
                    timezone '+1'
                }
            }
        }
    }
}

signing {
    required { admin }
    sign publishing.publications.mavenJava
}

task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
}

//
// RELEASE
//

task release() {
    group 'Project'
    description 'Builds everything for the release.'

    dependsOn build
    dependsOn javadoc
    dependsOn jacocoTestReport
}

//
// ADDON
//
apply from: "redis.gradle"
